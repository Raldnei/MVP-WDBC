# app.py
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from modelo import carregar_modelo, calcular_metricas

st.set_page_config(page_title="Classificador de C√¢ncer de Mama", page_icon="üß¨", layout="wide")

# Carrega o modelo e os dados
model, scaler, X_test, y_test, df, X_train, y_train, train_indices, test_indices = carregar_modelo()

# Calcula as m√©tricas
accuracy, sensitivity, specificity, auc, cm = calcular_metricas(model, X_test, y_test)

# Lista de caracter√≠sticas que o modelo vai usar para fazer as previs√µes
features = ['radius1', 'texture1', 'perimeter1', 'area1', 'smoothness1', 'compactness1', 'concavity1', 'concave_points1', 
            'symmetry1', 'fractal_dimension1', 'radius2', 'texture2', 'perimeter2', 'area2', 'smoothness2', 'compactness2', 
            'concavity2', 'concave_points2', 'symmetry2', 'fractal_dimension2', 'radius3', 'texture3', 'perimeter3', 
            'area3', 'smoothness3', 'compactness3', 'concavity3', 'concave_points3', 'symmetry3', 'fractal_dimension3']

# Agora, come√ßamos a parte da interface gr√°fica com o Streamlit
st.title("Classificador de C√¢ncer de Mama")  # T√≠tulo do aplicativo
st.write("Preencha os valores das 30 caracter√≠sticas para prever se o tumor √© maligno ou benigno.")  # Texto de introdu√ß√£o

# Criamos tr√™s bot√µes para mostrar diferentes gr√°ficos e informa√ß√µes
col1, col2, col3 = st.columns(3)  # Organiza os bot√µes em tr√™s colunas

with col1:
    show_performance = st.button("Desempenho", use_container_width=True)  # Bot√£o de desempenho
with col2:
    show_cm = st.button("Matriz de Confus√£o", use_container_width=True)  # Bot√£o da matriz de confus√£o
with col3:
    show_bar = st.button("Diagn√≥stico", use_container_width=True)  # Bot√£o para mostrar a distribui√ß√£o de diagn√≥stico

# Se o usu√°rio clicar em "Desempenho", mostramos um gr√°fico com as m√©tricas de desempenho
if show_performance:
    fig, ax = plt.subplots(figsize=(8, 3))  # Tamanho do gr√°fico
    metricas = ['Acur√°cia', 'Sensibilidade', 'Especificidade', 'AUC']
    valores = [accuracy, sensitivity, specificity, auc]

    sns.barplot(x=metricas, y=valores, palette='viridis', ax=ax)  # Gr√°fico de barras

    for p in ax.patches:
        ax.annotate(f'{p.get_height()*100:.2f}%', (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha='center', va='center', fontsize=8, color='black',  # Fonte menor
                    xytext=(0, 10), textcoords='offset points')  # Ajuste de dist√¢ncia do texto

    ax.set_title('Desempenho do Modelo LR')  # T√≠tulo do gr√°fico
    ax.set_ylim(0.94, 1.01)  # Limita os valores do gr√°fico de 90% a 100%
    ax.set_ylabel('Valor')  # R√≥tulo do eixo Y

    plt.tight_layout()  # Ajusta o layout do gr√°fico
    st.pyplot(fig, use_container_width=False)  # Exibe o gr√°fico

# Se o usu√°rio clicar em "Matriz de Confus√£o", mostramos um gr√°fico com a matriz de confus√£o
if show_cm:
    fig_cm, ax_cm = plt.subplots(figsize=(3, 2))  # Reduzido para metade do tamanho anterior
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Benigno', 'Maligno'], 
                yticklabels=['Benigno', 'Maligno'], ax=ax_cm)  # Gr√°fico de calor

    ax_cm.set_title('Matriz de Confus√£o')  # T√≠tulo do gr√°fico
    st.pyplot(fig_cm, use_container_width=False)  # Exibe o gr√°fico

# Se o usu√°rio clicar em "Diagn√≥stico", mostramos a distribui√ß√£o dos diagn√≥sticos
if show_bar:
    diagnosis_counts = df['Diagnosis'].value_counts()

    fig_bar, ax_bar = plt.subplots(figsize=(3, 2))  # Reduzido para metade do tamanho anterior
    bars = ax_bar.bar(diagnosis_counts.index, diagnosis_counts.values, color=['red', 'green'])

    for bar in bars:
        yval = bar.get_height()
        ax_bar.text(bar.get_x() + bar.get_width() / 2, yval + 2, 
                    f'{yval}', ha='center', va='bottom', fontsize=10, color='black')

    ax_bar.set_ylim(0, 400)  # Limita o eixo Y
    ax_bar.set_title('Distribui√ß√£o de Diagn√≥stico (M - Maligno, B - Benigno)')  # T√≠tulo
    ax_bar.set_xlabel('Diagn√≥stico')  # R√≥tulo do eixo X
    ax_bar.set_ylabel('Frequ√™ncia')  # R√≥tulo do eixo Y
    st.pyplot(fig_bar, use_container_width=False)  # Exibe o gr√°fico

# Sele√ß√£o do diagn√≥stico
diagnostic_filter = st.selectbox("Escolha o diagn√≥stico", ['Todos', 'Benigno', 'Maligno'])

# Sele√ß√£o das colunas a serem exibidas
columns_to_show = st.multiselect("Escolha as colunas para exibir", options=df.columns.tolist(), default=['ID', 'Diagnosis'])
columns_to_show = ['ID', 'Diagnosis'] + [col for col in columns_to_show if col not in ['ID', 'Diagnosis']]

# Bot√£o para buscar dados do dataset
show_data = st.button("Buscar Dados do dataset", use_container_width=True)

if show_data:
    # Filtra os dados para incluir apenas os do conjunto de testes
    test_data = df.iloc[test_indices]  # Filtra os dados para incluir apenas os do conjunto de testes
    
    # Aplica o filtro nos dados de teste com base no diagn√≥stico escolhido
    if diagnostic_filter == 'Benigno':
        filtered_test_data = test_data[test_data['Diagnosis'] == 'B']
    elif diagnostic_filter == 'Maligno':
        filtered_test_data = test_data[test_data['Diagnosis'] == 'M']
    else:
        filtered_test_data = test_data  # Se "Todos" for selecionado, n√£o aplica filtro

    # Exibe os dados de teste filtrados
    st.write(filtered_test_data[columns_to_show].head(10))  # Mostra as 10 primeiras linhas dos dados de teste

# Permite que o usu√°rio insira uma ID para preencher automaticamente os dados
id_selecionada = st.text_input("Digite a ID para preencher automaticamente os dados:")

# Se a ID for v√°lida, mostramos os dados dessa ID
if id_selecionada:
    try:
        dados_id = df[df['ID'] == int(id_selecionada)].iloc[0]
        inputs = [dados_id[feature] for feature in features]
        st.write(f"Dados preenchidos para a ID {id_selecionada}:")
        st.write(dados_id)
    except IndexError:
        st.write("ID INV√ÅLIDO.")
    except ValueError:
        st.write("Por favor, insira uma ID v√°lida.")
else:
    # Se a ID n√£o for fornecida, usamos valores padr√£o para os dados
    inputs = [13.54, 14.36, 87.46, 566.3, 0.09779, 0.08129, 0.06664, 0.04781, 0.1885, 0.05766, 
              0.2699, 0.7886, 2.058, 23.56, 0.008462, 0.0146, 0.02387, 0.01315, 0.0198, 0.0023, 
              15.11, 19.26, 99.7, 711.2, 0.144, 0.1773, 0.239, 0.1288, 0.2977, 0.07259]

# Permite ao usu√°rio inserir valores para as caracter√≠sticas
inputs_usuario = []
colunas = st.columns(4)  

for i, feature in enumerate(features):
    with colunas[i % 4]:
        value = st.number_input(f'{feature}', value=inputs[i], step=0.1, key=feature)
        inputs_usuario.append(value)

input_data = pd.DataFrame([inputs_usuario], columns=features)

# Fazemos as previs√µes com o modelo e mostramos o resultado
input_data_scaled = scaler.transform(input_data)

if st.button("Prever"):
    prediction = model.predict(input_data_scaled)

    if prediction[0] == 1:
        st.write("O tumor √© **Maligno** (classe M).")  # Se for 1, √© maligno
    else:
        st.write("O tumor √© **Benigno** (classe B).")  # Se for 0, √© benigno